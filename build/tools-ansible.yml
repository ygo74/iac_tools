trigger:
  branches:
    include:
    - master
    - features/*
  paths:
    include:
    - tools/ansible/*
    - build/*
    - specifications/*
    exclude:
    - /**/*.md

jobs:
- job: VerifyAnsibleTools
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:

  - task: UsePythonVersion@0
    inputs:
        versionSpec: '2.7'
        architecture: 'x64'

  # - task: AzureKeyVault@1
  #   inputs:
  #     azureSubscription: 'Visual Studio Enterprise (62177529-73f0-4e11-a584-5d3526dc6999)'
  #     keyVaultName:  'mesfVault'
  #     secretsFilter: 'Ansible-Automation'

  - task: Bash@3
    inputs:
        targetType: 'inline'
        script: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install virtualenv
          python -m virtualenv ansible-2.9.6
          source ansible-2.9.6/bin/activate
          python -m pip install -r ansible/venv_requirements.txt
          sudo apt-get install dos2unix
    displayName: 'Install tools'

  # Convert files dos2unix
  - task: Bash@3
    inputs:
        targetType: 'inline'
        workingDirectory: .
        script: |
          find ansible/ -type f -not -path '*/\.*' -exec grep -Il '.' {} \; | xargs -d '\n' -L 1 dos2unix -k
    displayName: 'Convert files dos2unix'


  # yaml lint ansible code
  - task: Bash@3
    inputs:
        targetType: 'inline'
        workingDirectory: ansible
        script: |
          source ../ansible-2.9.6/bin/activate
          yamllint .
    displayName: 'Yaml lint'

  # ansible lint ansible code
  - task: Bash@3
    inputs:
        targetType: 'inline'
        workingDirectory: ansible
        script: |
          source ../ansible-2.9.6/bin/activate
          ansible-lint .
    displayName: 'Ansible lint'

  # Generate application specification
  - task: Bash@3
    inputs:
        targetType: 'inline'
        workingDirectory: ansible
        script: |
          source ../ansible-2.9.6/bin/activate
          ansible-playbook -i localhost,k 00-generate-application-servers.yml \
                 -e application=application_specifications_v2 \
                 -e application_definition_path=../specifications/application_specifications_v2.yml \
                 -e application_servers_path=$(Build.ArtifactStagingDirectory)
    displayName: 'Generate application specification'


  # Test application generated from specification
  - task: Bash@3
    inputs:
        targetType: 'inline'
        workingDirectory: ansible/tests
        script: |
          source ../../ansible-2.9.6/bin/activate
          ansible-playbook -i $(Build.ArtifactStagingDirectory)/dev 00-validate_iac_output.yml
    displayName: 'Validate generated application from specification'
    env:
      JUNIT_OUTPUT_DIR: $(System.DefaultWorkingDirectory)/tests
      JUNIT_TASK_CLASS: True
      JUNIT_TASK_RELATIVE_PATH: True

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '$(System.DefaultWorkingDirectory)/tests/**/*.xml'
      failTaskOnFailedTests: true
